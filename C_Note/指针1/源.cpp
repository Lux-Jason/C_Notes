#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int* p = &a;//指针变量(指针就是地址）
//	//指针是用来存放地址的，地址是唯一标识一块地址空间的
//	//指针在32位平台是4字节，64位平台是8字节
//	return 0;
//}
//int main()
//{
//	//printf("%d\n", sizeof(char*));//8
//	//printf("%d\n", sizeof(short*));//8
//	//printf("%d\n", sizeof(double*));//8
//	//printf("%d\n", sizeof(int*));//8
//	int a = 0x11223344;
//	int* pa=&a;
//	//指针类型决定了指针进行解引用操作的时候，能够访问空间的大小
//	// int*：*p能够访问4个字节
//	// char*：*p能够访问1个字节
//	// double*：*p能够访问8个字节
//	// 
//	//char* pc = &a;//类型不匹配，不允许存入
//	//printf("%d\n", pa);
//	//printf("%p\n", pc);
//	*pa = 10;
//	return 0;
//}
//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	return 0;
//}
//int* p-->4
//char* p-->1
//double* p-->8
//指针类型决定了步长
//int main()
//{
//	int arr[10] = { 0 };
//	int* p=arr;//数组名-首元素的地址
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//	return 0;
//}
//
// 
// 
//野指针：
//野指针就是指针指向的位置是不可知的（随机的，不正确的，没有明确限制的）
//成因：
// 1.指针未初始化；
//int main()
//{
//	int a;//局部变量不初始化，默认为随机值
//	int* p;//局部的指针变量，就被初始化为随机值
//	*p = 20;//对指针所指地址的赋值非法
//	return 0;
//}
//2,指针越界访问；
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	for ( i = 0; i < 12; i++)
//	{
//		*(p + i) = 1;//当p被加到超出定义内存时就会越界访问
//	}
//	return 0;
//}
//3.指针指向的内存空间释放（与动态内存开辟有关）
//int* test()
//{
//	int a = 10;
//	return &a;
//}//该函数在使用过后便会初始化，故其传入值与再次使用时产生的值不同
//int main()
//{
//	int* p=test();
//	*p = 20;//此处赋值无意义，容易引发数据访问冲突
//	return 0;
//}